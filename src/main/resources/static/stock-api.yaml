openapi: 3.0.3
info:
  title: Inventory Management API
  description: API for managing categories, products, and sales.
  version: 1.0.0

servers:
  - url: http://localhost:8081/api/v1
    description: Local server

security:
  - jwt: []

paths:
  /category/all:
    get:
      tags:
        - Category
      summary: Get all categories
      operationId: CategoriesPerPage
      parameters:
        - in: query
          name: page
          description: number of page
          required: true
          schema:
            type: integer
            example: '1'
      responses:
        'default':
          description: A list of categories
          content:
            application/json:
              schema:
                type: CategoryPageDTO

  /category/{id}:
    get:
      tags:
        - Category
      operationId: getCategoryById
      summary: Get Category by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        'default':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
  /category/add:
    post:
      tags:
        - Category
      operationId: addCategory
      summary: Create a new Category
      requestBody:
        description: Category to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        'default':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
  /category/edit/{id}:
    put:
      tags:
        - Category
      operationId: editCategory
      summary: Update a category
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the Category
      requestBody:
        description: Updated category data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        'default':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
  /category/delete/{id}:
    delete:
      tags:
        - Category
      operationId: deleteCategory
      summary: Delete a Category
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the Category
      responses:
        '200':
          description: Category deleted
          content:
            text/plain:
              schema:
                type: string
                example: "Category deleted successfully."
        '400':
          description: Invalid Category value
  /category/search:
    get:
      tags:
        - Category
      operationId: getCategoriesByName
      summary: Get categories by name
      parameters:
        - in: query
          name: name
          description: name of category
          required: true
          schema:
            type: string
            example: 'phones'
      responses:
        'default':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'

  /product/{id}:
    get:
      tags:
        - Product
      operationId: getProductById
      summary: Get Product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        'default':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
  /product/all:
    get:
      tags:
        - Product
      operationId: ProductsPerPage
      summary: Get Product by page number
      #x-spring-paginated: true
      parameters:
        - in: query
          name: page
          description: number of page
          required: true
          schema:
            type: integer
            example: '1'
      responses:
        'default':
          description: A list of products
          content:
            application/json:
              schema:
                type: ProductPageDTO
  /product/add:
    post:
      tags:
        - Product
      operationId: addProduct
      summary: Create a new Product
      requestBody:
        description: Product to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        'default':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
  /product/edit/{id}:
    put:
      tags:
        - Product
      operationId: editProduct
      summary: Update a Product
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the Product
      requestBody:
        description: Updated Product data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
      responses:
        'default':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
  /product/delete/{id}:
    delete:
      tags:
        - Product
      operationId: deleteProduct
      summary: Delete a Product
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
          description: ID of the Product
      responses:
        '200':
          description: Product deleted
          content:
            text/plain:
              schema:
                type: string
                example: "Product deleted successfully."
        '400':
          description: Invalid Product value
  /product/search:
    get:
      tags:
        - Product
      operationId: getProductsByName
      summary: Get Product by name
      parameters:
        - in: query
          name: name
          description: name of Product
          required: true
          schema:
            type: string
            example: 'phones'
      responses:
        'default':
          description: A list of Product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDTO'
  /sales:
    get:
      tags:
        - Sale
      summary: Get all sales
      responses:
        'default':
          description: A list of sales
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SaleDTO'

    post:
      tags:
        - Sale
      summary: Create a new sale
      requestBody:
        description: Sale to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleDTO'
        required: true
      responses:
        'default':
          description: Sale created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDTO'
  /sales/{id}:
    get:
      tags:
        - Sale
      summary: Get a sale by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the sale
      responses:
        default:
          description: Sale details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDTO'
        '400':
          description: Invalid Sale ID
    put:
      tags:
        - Sale
      summary: Update a sale
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the sale
      requestBody:
        description: Updated sale data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleDTO'
        required: true
      responses:
        'default':
          description: Sale updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDTO'
    delete:
      tags:
        - Sale
      summary: Delete a sale
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the sale
      responses:
        'default':
          description: Sale deleted
  /users:
    post:
      tags:
        - usern
      summary: Create usern
      description: This can only be done by the logged in usern.
      operationId: createusern
      requestBody:
        description: Created usern object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
  /user/login:
    post:
      tags:
        - Authentication
      summary: Logs usern into the system
      description: ''
      operationId: login
      requestBody:
        description: User Login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPayload'
      responses:
        'default':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the usern
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - Authentication
      summary: Logs out current logged in user session
      description: ''
      operationId: logout
      parameters: [ ]
      responses:
        default:
          description: successful operation
components:
  securitySchemes:
    jwt:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
  schemas:
    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - name
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productName:
          type: string
        productCode:
          type: string
        description:
          type: string
        quantity:
          type: integer
          format: int64
        unitBuyPrice:
          type: number
          format: double
        unitSellPrice:
          type: number
          format: double
        buyDate:
          type: string
          format: date
        category:
          $ref: '#/components/schemas/CategoryDTO'
      required:
        - productName
        - productCode
        - quantity
        - unitPrice
        - sellPrice
        - buyDate
        - category
    SaleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        saleDate:
          type: string
          format: date
        saleQuantity:
          type: integer
          format: int64
        discount:
          type: number
          format: double
        product:
          $ref: '#/components/schemas/ProductDTO'
      required:
        - description
        - saleDate
        - saleQuantity
        - discount
        - product
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
          example: John
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        usernStatus:
          type: integer
          description: usern Status
          format: int32
        deleted:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        roles:
          type: string
          example: 'ADMIN|STAFF'
      required:
        - username
        - password
        - status

    LoginPayload:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    Token:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1221
        token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0IiwiYXVkIjpbImFkbWluIl0sImlzcyI6Im1hc29uLm1ldGFtdWcubmV0IiwiZXhwIjoxNTc0NTEyNzY1LCJpYXQiOjE1NjY3MzY3NjUsImp0aSI6ImY3YmZlMzNmLTdiZjctNGViNC04ZTU5LTk5MTc5OWI1ZWI4YSJ9.EVcCaSqrSNVs3cWdLt-qkoqUk7rPHEOsDHS8yejwxMw"
        expiration:
          type: integer
          format: int64
          example: 1235216897543
        roles:
          type: string
          example: "ADMIN;SUPERVISOR;STAFF"
        firstname:
          type: string
          example: ismail
        lastname:
          type: string
          example: rzouki
        username:
          type: string
          example: ir91995

    CommonResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Exception Details from the API
        details:
          type: string
          example: "Common Response returned from the server"
    
