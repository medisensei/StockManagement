openapi: 3.0.3
info:
  title: Inventory Management API
  description: API for managing categories, products, and sales.
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Local server

paths:
  /categories:
    get:
      tags:
        - Category
      summary: Get all categories
      responses:
        'default':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'

    post:
      tags:
        - Category
      summary: Create a new category
      requestBody:
        description: Category to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
        required: true
      responses:
        'default':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'

  /categories/{id}:
    get:
      tags:
        - Category
      summary: Get a category by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        'default':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'

    put:
      tags:
        - Category
      summary: Update a category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      requestBody:
        description: Updated category data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
        required: true
      responses:
        'default':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'

    delete:
      tags:
        - Category
      summary: Delete a category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        'default':
          description: Category deleted

  /products:
    get:
      tags:
        - Product
      summary: Get all products
      responses:
        'default':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDTO'

    post:
      tags:
        - Product
      summary: Create a new product
      requestBody:
        description: Product to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
        required: true
      responses:
        'default':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'

  /products/{id}:
    get:
      tags:
        - Product
      summary: Get a product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product
      responses:
        'default':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'

    put:
      tags:
        - Product
      summary: Update a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product
      requestBody:
        description: Updated product data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDTO'
        required: true
      responses:
        'default':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'

    delete:
      tags:
        - Product
      summary: Delete a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product
      responses:
        'default':
          description: Product deleted

  /sales:
    get:
      tags:
        - Sale
      summary: Get all sales
      responses:
        'default':
          description: A list of sales
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SaleDTO'

    post:
      tags:
        - Sale
      summary: Create a new sale
      requestBody:
        description: Sale to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleDTO'
        required: true
      responses:
        'default':
          description: Sale created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDTO'
  /sales/{id}:
    get:
      tags:
        - Sale
      summary: Get a sale by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the sale
      responses:
        default:
          description: Sale details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDTO'
        '400':
          description: Invalid Sale ID
    put:
      tags:
        - Sale
      summary: Update a sale
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the sale
      requestBody:
        description: Updated sale data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleDTO'
        required: true
      responses:
        'default':
          description: Sale updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleDTO'
    delete:
      tags:
        - Sale
      summary: Delete a sale
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the sale
      responses:
        'default':
          description: Sale deleted
  /usern:
    post:
      tags:
        - usern
      summary: Create usern
      description: This can only be done by the logged in usern.
      operationId: createusern
      requestBody:
        description: Created usern object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usernDTO'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usernDTO'
  /usern/login:
      get:
        tags:
          - usern
        summary: Logs usern into the system
        description: ''
        operationId: loginusern
        parameters:
          - name: usernname
            in: query
            description: The usern name for login
            required: false
            schema:
              type: string
          - name: password
            in: query
            description: The password for login in clear text
            required: false
            schema:
              type: string
        responses:
          'default':
            description: successful operation
            headers:
              X-Rate-Limit:
                description: calls per hour allowed by the usern
                schema:
                  type: integer
                  format: int32
              X-Expires-After:
                description: date in UTC when token expires
                schema:
                  type: string
                  format: date-time
            content:
              application/json:
                schema:
                  type: string
          '400':
            description: Invalid usernname/password supplied
  /usern/logout:
      get:
        tags:
          - usern
        summary: Logs out current logged in usern session
        description: ''
        operationId: logoutusern
        parameters: [ ]
        responses:
          default:
            description: successful operation
  /usern/{usernname}:
      get:
        tags:
          - usern
        summary: Get usern by usern name
        description: ''
        operationId: getusernByName
        parameters:
          - name: usernname
            in: path
            description: 'The name that needs to be fetched. Use usern1 for testing. '
            required: true
            schema:
              type: string
        responses:
          'default':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/usernDTO'
          '400':
            description: Invalid usernname supplied
          '404':
            description: usern not found
      put:
        tags:
          - usern
        summary: Update usern
        description: This can only be done by the logged in usern.
        operationId: updateusern
        parameters:
          - name: usernname
            in: path
            description: name that need to be deleted
            required: true
            schema:
              type: string
        requestBody:
          description: Update an existent usern in the store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usernDTO'
        responses:
          default:
            description: successful operation
      delete:
        tags:
          - usern
        summary: Delete usern
        description: This can only be done by the logged in usern.
        operationId: deleteusern
        parameters:
          - name: usernname
            in: path
            description: The name that needs to be deleted
            required: true
            schema:
              type: string
        responses:
          default:
            description: usernname deleted
          '400':
            description: Invalid usernname supplied
          '404':
            description: usern not found
components:
  schemas:
    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - name
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productName:
          type: string
        productCode:
          type: string
        description:
          type: string
        quantity:
          type: integer
          format: int64
        unitPrice:
          type: number
          format: double
        sellPrice:
          type: number
          format: double
        buyDate:
          type: string
          format: date
        category:
          $ref: '#/components/schemas/CategoryDTO'
      required:
        - productName
        - productCode
        - quantity
        - unitPrice
        - sellPrice
        - buyDate
        - category
    SaleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        saleDate:
          type: string
          format: date
        saleQuantity:
          type: integer
          format: int64
        discount:
          type: number
          format: double
        product:
          $ref: '#/components/schemas/ProductDTO'
      required:
        - description
        - saleDate
        - saleQuantity
        - discount
        - product
    usernDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        usernname:
          type: string
        firstName:
          type: string
          example: John
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        usernStatus:
          type: integer
          description: usern Status
          format: int32
      required:
        - usernname
        - password
        - status